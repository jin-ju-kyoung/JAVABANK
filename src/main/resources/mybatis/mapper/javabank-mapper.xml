<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mybatis.javabank.javabank-mapper">
    <insert id="joinSuccess" parameterType="java.util.Map">
         insert into javabankUser (userId, userPw, userName, userBirth, userEmail, userTel, userRoles, userRegDate)
         	values (#{userId}, #{userPw}, #{userName}, #{userBirth}, #{userTel}, #{fullEmail},'USER', SYSDATE)
    </insert>
    
    <select id="findByUserId" parameterType="String" resultType="UserDTO">
		select * from javabankUser 
		where userId = #{userid}
    </select>
    
    <select id="getAccountCountByUserId" parameterType="String" resultType="int">
    	select count(*) from javabankDeposit where userId=#{userId}
    </select>
    
    
    <insert id="saveAccount" parameterType="map">
    	INSERT INTO javabankDeposit (
            depositAccount,
            userId,
            depositPw,
            category,
            regDate,
            interestRate,
            transactionLimit,
            mainAccount
        ) 
        VALUES (
            #{accountNumber, jdbcType=VARCHAR},  <!-- 계좌 번호 값 -->
	        #{userId, jdbcType=VARCHAR},
	        #{depositPw, jdbcType=NUMERIC},
	        DEFAULT,
	        SYSDATE,
	        DEFAULT,
	        #{accountLimit, jdbcType=NUMERIC},
	        #{mainAccount, jdbcType=VARCHAR}
        )
    </insert>
    
    <insert id="saveInitialTransaction">
        INSERT INTO javabankDtransaction (accountSeq, depositAccount, deltaAmount, balance, type, memo)
        VALUES (javabankDtransaction_seq.nextval, #{accountNumber}, #{deltaAmount}, #{balance}, #{type}, #{memo})
    </insert>
    
    <select id="checkId" parameterType="String" resultType="int">
		select count(*) from javabankUser 
		where userId = #{userId}
	</select>
	
	<select id="getAccountsByUserId" parameterType="String" resultType="DepositDTO">
		WITH LatestTransaction AS (
			    SELECT 
			        depositAccount, 
			        MAX(updateDate) AS latestUpdateDate
			    FROM 
			        javabankDtransaction
			    GROUP BY 
			        depositAccount
			)
			SELECT 
			    D.depositAccount,    
			    D.category,          
			    T.balance,           
			    D.regDate,           
			    D.interestRate,      
			    D.transactionLimit,  
			    D.mainAccount,       
			    T.accountSeq,        
			    T.updateDate,        
			    T.type,              
			    T.memo,              
			    T.deltaAmount        
			FROM 
			    javabankDeposit D
			LEFT JOIN 
			    LatestTransaction LT 
			ON 
			    D.depositAccount = LT.depositAccount
			LEFT JOIN 
			    javabankDtransaction T 
			ON 
			    D.depositAccount = T.depositAccount
			    AND T.updateDate = LT.latestUpdateDate
			WHERE 
			    D.userId = #{userId}
			    AND (
			        D.mainAccount = 'Y' 
			        OR D.regDate = (
			            SELECT MAX(D2.regDate)
			            FROM javabankDeposit D2
			            WHERE D2.userId = D.userId
			        )
			    )
			ORDER BY 
			    D.mainAccount DESC, D.regDate DESC
	</select>
	
	<select id="getDepositsByUserId" parameterType="String" resultType="ProductDTO">
			WITH RankedTransactions AS (
			    SELECT 
			        P.productAccount,    -- 계좌 번호
			        P.productPw,         -- 계좌 비밀번호
			        P.userId,            -- 아이디
			        P.category,          -- 상품 구분 (정기예금/정기적금)
			        P.autoTransferDate,  -- 자동이체일
			        P.monthlyPayment,    -- 월납입 금액
			        P.regDate,           -- 계좌 개설일
			        P.expiryDate,        -- 만기일자
			        P.interestRate,      -- 이자율
			        P.depositAccount,    -- 자동이체 통장
			        T.productSeq,        -- 이체 번호
			        T.updateDate,        -- 변동일자
			        T.type,              -- 거래 구분
			        T.memo,              -- 적요
			        T.deltaAmount,       -- 변동 금액
			        T.balance,           -- 잔액
			        ROW_NUMBER() OVER (PARTITION BY P.productAccount ORDER BY T.updateDate DESC) AS rn
			        -- 각 계좌별로 최신 트랜잭션에 순번을 매김
			    FROM 
			        javabankProduct P
			    INNER JOIN 
			        javabankPtransaction T
			    ON 
			        P.productAccount = T.productAccount
			    WHERE 
			        P.category = '예금'          -- 정기예금만 조회
			        AND P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
			)
			SELECT 
			    productAccount,    -- 계좌 번호
			    productPw,         -- 계좌 비밀번호
			    userId,            -- 아이디
			    category,          -- 상품 구분 (정기예금/정기적금)
			    autoTransferDate,  -- 자동이체일
			    monthlyPayment,    -- 월납입 금액
			    regDate,           -- 계좌 개설일
			    expiryDate,        -- 만기일자
			    interestRate,      -- 이자율
			    depositAccount,    -- 자동이체 통장
			    productSeq,        -- 이체 번호
			    updateDate,        -- 변동일자
			    type,              -- 거래 구분
			    memo,              -- 적요
			    deltaAmount,       -- 변동 금액
			    balance            -- 잔액
			FROM RankedTransactions
			WHERE rn = 1  -- 각 계좌에 대해 가장 최신의 트랜잭션만 선택
</select>
	
	
	<select id="getSavingsByUserId" parameterType="String" resultType="ProductDTO">
			WITH RankedTransactions AS (
			    SELECT 
			        P.productAccount,    -- 계좌 번호
			        P.productPw,         -- 계좌 비밀번호
			        P.userId,            -- 아이디
			        P.category,          -- 상품 구분 (정기예금/정기적금)
			        P.autoTransferDate,  -- 자동이체일
			        P.monthlyPayment,    -- 월납입 금액
			        P.regDate,           -- 계좌 개설일
			        P.expiryDate,        -- 만기일자
			        P.interestRate,      -- 이자율
			        P.depositAccount,    -- 자동이체 통장
			        T.productSeq,        -- 이체 번호
			        T.updateDate,        -- 변동일자
			        T.type,              -- 거래 구분
			        T.memo,              -- 적요
			        T.deltaAmount,       -- 변동 금액
			        T.balance,           -- 잔액
			        ROW_NUMBER() OVER (PARTITION BY P.productAccount ORDER BY T.updateDate DESC) AS rn
			        -- 각 계좌별로 최신 트랜잭션에 순번을 매김
			    FROM 
			        javabankProduct P
			    INNER JOIN 
			        javabankPtransaction T
			    ON 
			        P.productAccount = T.productAccount
			    WHERE 
			        P.category = '적금'          -- 정기예금만 조회
			        AND P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
			)
			SELECT 
			    productAccount,    -- 계좌 번호
			    productPw,         -- 계좌 비밀번호
			    userId,            -- 아이디
			    category,          -- 상품 구분 (정기예금/정기적금)
			    autoTransferDate,  -- 자동이체일
			    monthlyPayment,    -- 월납입 금액
			    regDate,           -- 계좌 개설일
			    expiryDate,        -- 만기일자
			    interestRate,      -- 이자율
			    depositAccount,    -- 자동이체 통장
			    productSeq,        -- 이체 번호
			    updateDate,        -- 변동일자
			    type,              -- 거래 구분
			    memo,              -- 적요
			    deltaAmount,       -- 변동 금액
			    balance            -- 잔액
			FROM RankedTransactions
			WHERE rn = 1  -- 각 계좌에 대해 가장 최신의 트랜잭션만 선택
	</select>
	
	<insert id="transferMoneyOk" >
		INSERT INTO javabankDtransaction (accountSeq, depositAccount, deltaAmount, balance, type, memo, transferredName, transferredAccount )
        VALUES (javabankDtransaction_seq.nextval, #{depositAccount}, #{deltaAmount}, #{balance}, '출금', #{memo, jdbcType=VARCHAR} ,#{accountName, jdbcType=VARCHAR},#{transferredAccount})
	</insert>
	
	<select id="getTodayTransferTotalAmount" parameterType="String" resultType="int">
		SELECT SUM(T.deltaAmount) AS todayTransferTotal
	    FROM javabankDtransaction T
	    JOIN javabankDeposit D ON T.depositAccount = D.depositAccount
	    WHERE D.userId = #{userId}
	      AND T.type = '출금'
	      AND TO_CHAR(T.updateDate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
	</select>
	
	<select id="getTodayTransferLimit" parameterType="String" resultType="int">
		select transactionLimit
		from javabankDeposit
		where depositAccount = #{account}
	</select>
    
    <insert id="saveDeposit" parameterType="map">
    	INSERT INTO javabankProduct (
            productAccount,
            userId,
            productPw,
            category,
            regDate,
            expiryDate,
            interestRate,
            depositAccount
        ) 
        VALUES (
            #{productAccount, jdbcType=VARCHAR},  <!-- 계좌 번호 값 -->
	        #{userId, jdbcType=VARCHAR},
	        #{productPw, jdbcType=NUMERIC},
	        #{category},
	        SYSDATE,
	        #{expiryDate},
	        #{interestRate},
	        #{depositAccount, jdbcType=VARCHAR}
        )
    </insert>
    
    <insert id="withdrawFromAccount" parameterType="map">
    	insert into javabankDtransaction (
            accountSeq,           
            depositAccount,
            transferredAccount,       
            updateDate,           
            type,                 
            memo,                 
            deltaAmount,          
            balance               
        ) 
        VALUES (
            javabankDtransaction_seq.NEXTVAL,  
        #{depositAccount, jdbcType=VARCHAR},  
        #{transferredAccount, jdbcType=VARCHAR},  
        SYSDATE,      
        #{type, jdbcType=VARCHAR},            
        #{memo, jdbcType=VARCHAR},            
        #{deltaAmount, jdbcType=NUMERIC},     
        #{balance, jdbcType=NUMERIC}          
        )
    </insert>
    
    <select id="getAccountBalance" parameterType="String" resultType="BigDecimal">
	     SELECT balance
	    FROM javabankDtransaction
	    WHERE depositAccount = #{depositAccount}
	    AND ROWNUM = 1
	    ORDER BY updateDate DESC
	</select>
    
    <insert id="saveInitialTransactionDeposit">
        INSERT INTO javabankPtransaction (productSeq, productAccount,updateDate, deltaAmount, balance, type, memo)
        VALUES (javabankPtransaction_seq.nextval, #{productAccount}, SYSDATE, #{deltaAmount}, #{balance}, #{type}, #{memo})
    </insert>
    
    
    
    <select id="mainAccount" parameterType="String" resultType="String">
    	SELECT depositAccount 
		FROM javabankDeposit
		WHERE userId = #{userId}
		  AND mainAccount = 'Y'
    </select>
    
    <insert id="saveSaving" parameterType="map">
    	INSERT INTO javabankProduct (
            productAccount,
            userId,
            productPw,
            category,
            regDate,
            expiryDate,
            interestRate,
            depositAccount,
            autoTransferDate,
            monthlyPayment
        ) 
        VALUES (
            #{productAccount, jdbcType=VARCHAR},  <!-- 계좌 번호 값 -->
	        #{userId, jdbcType=VARCHAR},
	        #{productPw, jdbcType=NUMERIC},
	        #{category},
	        SYSDATE,
	        #{expiryDate},
	        #{interestRate},
	        #{mainAccount, jdbcType=VARCHAR},
	        #{autoTransferDate},
	        #{monthlyPayment}
        )
    </insert>
    
    <insert id="saveInitialTransactionSaving">
        INSERT INTO javabankPtransaction (productSeq, productAccount,updateDate, deltaAmount, balance, type, memo)
        VALUES (javabankPtransaction_seq.nextval, #{productAccount}, SYSDATE, #{deltaAmount}, #{balance}, #{type}, #{memo})
    </insert>
    
    <select id="getAccountByAccountNumber" parameterType="String" resultType="DepositDTO">
    	SELECT d.*,t.*
		FROM 
		    javabankDeposit d
		FULL JOIN 
		    javabankDtransaction t
		ON 
		    d.depositAccount = t.depositAccount
		WHERE 
		    (d.depositAccount = #{depositAccount} OR t.depositAccount = #{depositAccount})
    AND updateDate >= ADD_MONTHS(SYSDATE, -1)  <!-- 최근 1개월 내 거래만 조회 -->
    ORDER BY updateDate DESC
    </select>
    
    <select id="getDepositByAccountNumber" parameterType="String" resultType="ProductDTO">
    	SELECT d.*,t.*
		FROM 
		    javabankProduct d
		FULL JOIN 
		    javabankPtransaction t
		ON 
		    d.productAccount = t.productAccount
		WHERE 
		    (d.productAccount = #{productAccount} OR t.productAccount = #{productAccount})
    AND updateDate >= ADD_MONTHS(SYSDATE, -1)  <!-- 최근 1개월 내 거래만 조회 -->
    ORDER BY updateDate DESC
    </select>
    
    <select id="isValidAccount" parameterType="String" resultType="int">
    	SELECT CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END
FROM javabankDeposit
WHERE depositAccount = #{transferredAccount}
    </select>
    
    <select id="getAccountName" parameterType="String" resultType="String">
    	SELECT 
		    u.userName
		FROM 
		    javabankDeposit a
		JOIN 
		    javabankUser u
		ON 
		    a.userId = u.userId
		WHERE 
		    a.depositAccount = #{transferredAccount}
    </select>
    
    <select id="getTransferList" parameterType="String" resultType="DepositDTO">
    	WITH RecentWithdrawals AS (
		    SELECT 
		        t.transferredAccount, 
		        t.transferredName, 
		        MIN(t.updateDate) AS updateDate  
		    FROM 
		        javabankDtransaction t
		    JOIN 
		        javabankDeposit d 
		    ON 
		        t.depositAccount = d.depositAccount
		    WHERE 
		        d.userId = #{userId} 
		        AND t.type = '출금'
		    GROUP BY 
		        t.transferredAccount, t.transferredName
		    ORDER BY 
		        MIN(t.updateDate) DESC
		)
		SELECT 
		    rw.transferredAccount, 
		    rw.transferredName
		FROM 
		    (SELECT DISTINCT transferredAccount, transferredName, ROWNUM AS rn
		     FROM RecentWithdrawals
		     WHERE ROWNUM &lt;= 3
		    ) rw
    </select>
    
    <select id="getAllSavingsAccounts" resultType="ProductDTO">
    SELECT 
        p.productAccount,                
        p.category,                      
        p.interestRate,                  
        t.updateDate,                    
        t.type,                          
        t.deltaAmount,                   
        t.balance                        
    FROM 
        javabankProduct p
    JOIN 
        javabankPtransaction t 
        ON p.productAccount = t.productAccount
    WHERE 
        p.expiryDate >= SYSDATE 
        AND t.updateDate = (
            SELECT MAX(t2.updateDate) 
            FROM javabankPtransaction t2 
            WHERE t2.productAccount = p.productAccount
        )
</select>
    
    <insert id="insertInterestTransaction" parameterType="map">
        INSERT INTO javabankPtransaction (
            productSeq,           
            productAccount,       
            updateDate,           
            type,                 
            memo,                 
            deltaAmount,          
            balance               
        ) 
        VALUES (
            javabankPtransaction_seq.NEXTVAL,  
        #{productAccount, jdbcType=VARCHAR},  
        #{updateDate, jdbcType=TIMESTAMP},      
        #{type, jdbcType=VARCHAR},            
        #{memo, jdbcType=VARCHAR},            
        #{deltaAmount, jdbcType=NUMERIC},     
        #{balance, jdbcType=NUMERIC}          
        )
</insert>

<select id="getAllAccounts" resultType="DepositDTO">
    SELECT 
        p.depositAccount,                
        p.category,                      
        p.interestRate,                  
        t.updateDate,                    
        t.type,                          
        t.deltaAmount,                   
        t.balance                        
    FROM 
        javabankDeposit p
    JOIN 
        javabankDtransaction t 
        ON p.depositAccount = t.depositAccount
    WHERE 
        t.updateDate = (
            SELECT MAX(t2.updateDate) 
            FROM javabankDtransaction t2 
            WHERE t2.depositAccount = p.depositAccount
        )
</select>

<insert id="insertInterest" parameterType="map">
        INSERT INTO javabankDtransaction (
            accountSeq,           
            depositAccount,
            transferredName,       
            updateDate,           
            type,                 
            memo,                 
            deltaAmount,          
            balance               
        ) 
        VALUES (
            javabankDtransaction_seq.NEXTVAL,  
        #{depositAccounts, jdbcType=VARCHAR},  
        #{transferredName, jdbcType=VARCHAR},  
        #{updateDate, jdbcType=TIMESTAMP},      
        #{type, jdbcType=VARCHAR},            
        #{memo, jdbcType=VARCHAR},            
        #{deltaAmount, jdbcType=NUMERIC},     
        #{balance, jdbcType=NUMERIC}          
        )
</insert>

<!-- 자동이체 -->

	<select id="getTodayTransfers" resultType="ProductDTO">
		SELECT p.*, pt.balance
    FROM javabankProduct p
    JOIN (
        SELECT productAccount, balance
        FROM (
            SELECT productAccount, balance, 
                   ROW_NUMBER() OVER (PARTITION BY productAccount ORDER BY updateDate DESC) AS rn
            FROM javabankPtransaction
        ) 
        WHERE rn = 1  -- 최신 잔액만 선택
    ) pt ON p.productAccount = pt.productAccount
    WHERE TO_CHAR(SYSDATE, 'DD') = LPAD(p.autoTransferDate, 2, '0')
	</select>
	
	<select id="getMainAccount" parameterType="String" resultType="DepositDTO">
		SELECT 
	        d.depositAccount,      -- 입출금 계좌 번호
	        d.userId,              -- 사용자 ID
	        t.balance              -- 최신 거래 내역의 잔액
	    FROM 
	        javabankDeposit d
	    LEFT JOIN 
	        (SELECT 
	             t.depositAccount, 
	             t.balance
	         FROM 
	             (SELECT 
	                  depositAccount, 
	                  balance, 
	                  ROW_NUMBER() OVER (PARTITION BY depositAccount ORDER BY updateDate DESC) AS rn
	              FROM 
	                  javabankDtransaction
	             ) t
	         WHERE t.rn = 1  -- 각 계좌별로 최신 거래 1건만 가져옴
	        ) t
	    ON 
	        d.depositAccount = t.depositAccount
	    WHERE 
	        d.userId = #{userId}
	        AND d.mainAccount = 'Y'
	</select>
	
	<insert id="withdrawFromMainAccount" parameterType="map">
      INSERT INTO javabankDtransaction (
        accountSeq, 
        depositAccount, 
        transferredAccount, 
        transferredName, 
        updateDate, 
        type, 
        deltaAmount, 
        balance
    )
    VALUES (
        javabankDtransaction_seq.NEXTVAL,  
        #{depositAccount},                
        #{transferredAccount, jdbcType=VARCHAR},  
        #{transferredName, jdbcType=VARCHAR},     
        SYSDATE,                            
        #{type},                             
        #{deltaAmount, jdbcType=DECIMAL},  
        #{balance, jdbcType=DECIMAL}  -- 이미 계산된 잔액을 사용
    )
</insert>
	
	
	<insert id="depositToProductAccount" parameterType="map">
		INSERT INTO javabankPtransaction (
		    productSeq, 
		    productAccount, 
		    updateDate, 
		    type, 
		    memo,
		    deltaAmount, 
		    balance
		)
		VALUES (
        javabankPtransaction_seq.NEXTVAL,  
        #{productAccount},                 
        SYSDATE,                           
        #{type},                           
        #{memo},                           
        #{deltaAmount, jdbcType=DECIMAL},                  
        #{balance, jdbcType=DECIMAL}       
    )
	</insert>
	
	
	
	<select id="MyAccountsByUserId" parameterType="String" resultType="DepositDTO">
		SELECT 
            D.depositAccount,   
            D.category,          
            T.balance,           
            D.regDate,           
            D.interestRate,      
            D.transactionLimit,  
            D.mainAccount,       
            T.accountSeq,        
            T.updateDate,        
            T.type,              
            T.memo,              
            T.deltaAmount        
        FROM 
            javabankDeposit D
        LEFT JOIN 
            javabankDtransaction T 
        ON 
            D.depositAccount = T.depositAccount
        WHERE 
            D.userId = #{loginId}
        AND 
	        T.updateDate = (
	            SELECT MAX(T2.updateDate)
	            FROM javabankDtransaction T2
	            WHERE T2.depositAccount = T.depositAccount
	        )
	</select>
	
	<select id="getMyDepositsByUserId" parameterType="String" resultType="ProductDTO">
			WITH RankedTransactions AS (
			    SELECT 
			        P.productAccount,    -- 계좌 번호
			        P.productPw,         -- 계좌 비밀번호
			        P.userId,            -- 아이디
			        P.category,          -- 상품 구분 (정기예금/정기적금)
			        P.autoTransferDate,  -- 자동이체일
			        P.monthlyPayment,    -- 월납입 금액
			        P.regDate,           -- 계좌 개설일
			        P.expiryDate,        -- 만기일자
			        P.interestRate,      -- 이자율
			        P.depositAccount,    -- 자동이체 통장
			        T.productSeq,        -- 이체 번호
			        T.updateDate,        -- 변동일자
			        T.type,              -- 거래 구분
			        T.memo,              -- 적요
			        T.deltaAmount,       -- 변동 금액
			        T.balance,           -- 잔액
			        ROW_NUMBER() OVER (PARTITION BY P.productAccount ORDER BY T.updateDate DESC) AS rn
			        -- 각 계좌별로 최신 트랜잭션에 순번을 매김
			    FROM 
			        javabankProduct P
			    INNER JOIN 
			        javabankPtransaction T
			    ON 
			        P.productAccount = T.productAccount
			    WHERE 
			        P.category = '예금'          -- 정기예금만 조회
			        AND P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
			)
			SELECT 
			    productAccount,    -- 계좌 번호
			    productPw,         -- 계좌 비밀번호
			    userId,            -- 아이디
			    category,          -- 상품 구분 (정기예금/정기적금)
			    autoTransferDate,  -- 자동이체일
			    monthlyPayment,    -- 월납입 금액
			    regDate,           -- 계좌 개설일
			    expiryDate,        -- 만기일자
			    interestRate,      -- 이자율
			    depositAccount,    -- 자동이체 통장
			    productSeq,        -- 이체 번호
			    updateDate,        -- 변동일자
			    type,              -- 거래 구분
			    memo,              -- 적요
			    deltaAmount,       -- 변동 금액
			    balance            -- 잔액
			FROM RankedTransactions
			WHERE rn = 1  -- 각 계좌에 대해 가장 최신의 트랜잭션만 선택
</select>
	
	
	<select id="getMySavingsByUserId" parameterType="String" resultType="ProductDTO">
			WITH RankedTransactions AS (
			    SELECT 
			        P.productAccount,    -- 계좌 번호
			        P.productPw,         -- 계좌 비밀번호
			        P.userId,            -- 아이디
			        P.category,          -- 상품 구분 (정기예금/정기적금)
			        P.autoTransferDate,  -- 자동이체일
			        P.monthlyPayment,    -- 월납입 금액
			        P.regDate,           -- 계좌 개설일
			        P.expiryDate,        -- 만기일자
			        P.interestRate,      -- 이자율
			        P.depositAccount,    -- 자동이체 통장
			        T.productSeq,        -- 이체 번호
			        T.updateDate,        -- 변동일자
			        T.type,              -- 거래 구분
			        T.memo,              -- 적요
			        T.deltaAmount,       -- 변동 금액
			        T.balance,           -- 잔액
			        ROW_NUMBER() OVER (PARTITION BY P.productAccount ORDER BY T.updateDate DESC) AS rn
			        -- 각 계좌별로 최신 트랜잭션에 순번을 매김
			    FROM 
			        javabankProduct P
			    INNER JOIN 
			        javabankPtransaction T
			    ON 
			        P.productAccount = T.productAccount
			    WHERE 
			        P.category = '적금'          -- 정기예금만 조회
			        AND P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
			)
			SELECT 
			    productAccount,    -- 계좌 번호
			    productPw,         -- 계좌 비밀번호
			    userId,            -- 아이디
			    category,          -- 상품 구분 (정기예금/정기적금)
			    autoTransferDate,  -- 자동이체일
			    monthlyPayment,    -- 월납입 금액
			    regDate,           -- 계좌 개설일
			    expiryDate,        -- 만기일자
			    interestRate,      -- 이자율
			    depositAccount,    -- 자동이체 통장
			    productSeq,        -- 이체 번호
			    updateDate,        -- 변동일자
			    type,              -- 거래 구분
			    memo,              -- 적요
			    deltaAmount,       -- 변동 금액
			    balance            -- 잔액
			FROM RankedTransactions
			WHERE rn = 1  -- 각 계좌에 대해 가장 최신의 트랜잭션만 선택
	</select>
	
	<!--이체 후 입금 -->
    <select id="getBalanceByAccount" parameterType="String" resultType="double">
	    SELECT balance
FROM (
    SELECT balance,
           ROW_NUMBER() OVER (PARTITION BY depositAccount ORDER BY updateDate DESC) AS rn
    FROM javabankDtransaction
    WHERE depositAccount = #{recipientAccount}
) 
WHERE rn = 1
	</select>
	
	<insert id="insertRecipientBalance" parameterType="map">
     INSERT INTO javabankDtransaction (
	        accountSeq, 
	        depositAccount, 
	        transferredAccount, 
	        transferredName, 
	        updateDate, 
	        type, 
	        deltaAmount, 
	        balance
	    )
	    VALUES (
	        javabankDtransaction_seq.NEXTVAL,    -- 이체번호 (시퀀스)
	        #{depositAccount},                   -- 수신 계좌 번호
	        #{transferredAccount},               -- 이체된 계좌 번호
	        #{transferredName, jdbcType=VARCHAR},                  -- 이체된 사람 이름
	        SYSDATE,                             -- 변동일자
	        '입금',                              -- 거래 타입 ('입금')
	        #{deltaAmount},                      -- 입금 금액
	        #{balance}                           -- 입금 후 잔액
	    )
	</insert>
	
	<select id="checkDepositByUserId" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM javabankProduct
        WHERE userId = #{userId}
        	AND category ='예금'
    </select>
    
    <select id="checkSavingByUserId" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM javabankProduct
        WHERE userId = #{userId}
        	AND category ='적금'
    </select>
    
    <!-- 
    내계좌리스트에서 사용
    <select id="getAccountsByUserId" parameterType="String" resultType="DepositDTO">
		SELECT 
            D.depositAccount,   
            D.category,          
            T.balance,           
            D.regDate,           
            D.interestRate,      
            D.transactionLimit,  
            D.mainAccount,       
            T.accountSeq,        
            T.updateDate,        
            T.type,              
            T.memo,              
            T.deltaAmount        -
        FROM 
            javabankDeposit D
        LEFT JOIN 
            javabankDtransaction T 
        ON 
            D.depositAccount = T.depositAccount
        WHERE 
            D.userId = #{loginId}
        AND 
	        T.updateDate = (
	            SELECT MAX(T2.updateDate)
	            FROM javabankDtransaction T2
	            WHERE T2.depositAccount = T.depositAccount
	        )
	</select>
     -->
    
    
</mapper>