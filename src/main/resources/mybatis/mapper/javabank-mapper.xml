<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mybatis.javabank.javabank-mapper">
    <insert id="joinSuccess" parameterType="java.util.Map">
         insert into javabankUser (userId, userPw, userName, userBirth, userEmail, userTel, userRoles, userRegDate)
         	values (#{userId}, #{userPw}, #{userName}, #{userBirth}, #{userTel}, #{fullEmail},'USER', SYSDATE)
    </insert>
    
    <select id="findByUserId" parameterType="String" resultType="UserDTO">
		select * from javabankUser 
		where userId = #{userid}
    </select>
    
    <select id="getAccountCountByUserId" parameterType="String" resultType="int">
    	select count(*) from javabankDeposit where userId=#{userId}
    </select>
    
    
    <insert id="saveAccount" parameterType="map">
    	INSERT INTO javabankDeposit (
            depositAccount,
            userId,
            depositPw,
            category,
            regDate,
            interestRate,
            transactionLimit,
            mainAccount
        ) 
        VALUES (
            #{accountNumber, jdbcType=VARCHAR},  <!-- 계좌 번호 값 -->
	        #{userId, jdbcType=VARCHAR},
	        #{depositPw, jdbcType=NUMERIC},
	        DEFAULT,
	        SYSDATE,
	        DEFAULT,
	        #{accountLimit, jdbcType=NUMERIC},
	        #{mainAccount, jdbcType=VARCHAR}
        )
    </insert>
    
    <insert id="saveInitialTransaction">
        INSERT INTO javabankDtransaction (accountSeq, depositAccount, deltaAmount, balance, type, memo)
        VALUES (javabankDtransaction_seq.nextval, #{accountNumber}, #{deltaAmount}, #{balance}, #{type}, #{memo})
    </insert>
    
    <select id="checkId" parameterType="String" resultType="int">
		select count(*) from javabankUser 
		where userId = #{userId}
	</select>
	
	<select id="getAccountsByUserId" parameterType="String" resultType="DepositDTO">
		WITH LatestTransaction AS (
			    SELECT 
			        depositAccount, 
			        MAX(updateDate) AS latestUpdateDate
			    FROM 
			        javabankDtransaction
			    GROUP BY 
			        depositAccount
			)
			SELECT 
			    D.depositAccount,    
			    D.category,          
			    T.balance,           
			    D.regDate,           
			    D.interestRate,      
			    D.transactionLimit,  
			    D.mainAccount,       
			    T.accountSeq,        
			    T.updateDate,        
			    T.type,              
			    T.memo,              
			    T.deltaAmount        
			FROM 
			    javabankDeposit D
			LEFT JOIN 
			    LatestTransaction LT 
			ON 
			    D.depositAccount = LT.depositAccount
			LEFT JOIN 
			    javabankDtransaction T 
			ON 
			    D.depositAccount = T.depositAccount
			    AND T.updateDate = LT.latestUpdateDate
			WHERE 
			    D.userId = #{userId}
			    AND (
			        D.mainAccount = 'Y' 
			        OR D.regDate = (
			            SELECT MAX(D2.regDate)
			            FROM javabankDeposit D2
			            WHERE D2.userId = D.userId
			        )
			    )
			ORDER BY 
			    D.mainAccount DESC, D.regDate DESC
	</select>
	
	<select id="getDepositsByUserId" parameterType="String" resultType="ProductDTO">
			SELECT 
		        P.productAccount,   -- 계좌 번호
		        P.productPw,        -- 계좌 비밀번호
		        P.userId,           -- 아이디
		        P.category,         -- 상품 구분 (정기예금/정기적금)
		        P.autoTransferDate, -- 자동이체일
		        P.monthlyPayment,   -- 월납입 금액
		        P.regDate,          -- 계좌 개설일
		        P.expiryDate,       -- 만기일자
		        P.interestRate,     -- 이자율
		        P.depositAccount,   -- 자동이체 통장
		        T.productSeq,       -- 이체 번호
		        T.updateDate,       -- 변동일자
		        T.type,             -- 거래 구분
		        T.memo,             -- 적요
		        T.deltaAmount,      -- 변동 금액
		        T.balance           -- 잔액
		    FROM 
		        javabankProduct P
		    LEFT JOIN 
		        javabankPtransaction T 
		    ON 
		        P.productAccount = T.productAccount
		    WHERE 
		        P.category = '예금'  -- 정기예금만 조회
		    AND 
		        P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
	</select>
	
	
	<select id="getSavingsByUserId" parameterType="String" resultType="ProductDTO">
			SELECT 
		        P.productAccount,   -- 계좌 번호
		        P.productPw,        -- 계좌 비밀번호
		        P.userId,           -- 아이디
		        P.category,         -- 상품 구분 (정기예금/정기적금)
		        P.autoTransferDate, -- 자동이체일
		        P.monthlyPayment,   -- 월납입 금액
		        P.regDate,          -- 계좌 개설일
		        P.expiryDate,       -- 만기일자
		        P.interestRate,     -- 이자율
		        P.depositAccount,   -- 자동이체 통장
		        T.productSeq,       -- 이체 번호
		        T.updateDate,       -- 변동일자
		        T.type,             -- 거래 구분
		        T.memo,             -- 적요
		        T.deltaAmount,      -- 변동 금액
		        T.balance           -- 잔액
		    FROM 
		        javabankProduct P
		    LEFT JOIN 
		        javabankPtransaction T 
		    ON 
		        P.productAccount = T.productAccount
		    WHERE 
		        P.category = '적금'  -- 정기예금만 조회
		    AND 
		        P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
	</select>
	
	<insert id="transferMoneyOk" >
		INSERT INTO javabankDtransaction (accountSeq, depositAccount, deltaAmount, balance, type, memo, transferredName, transferredAccount )
        VALUES (javabankDtransaction_seq.nextval, #{depositAccount}, #{deltaAmount}, #{balance}, '출금', #{memo, jdbcType=VARCHAR} ,#{accountName, jdbcType=VARCHAR},#{transferredAccount})
	</insert>
	
	<select id="getTodayTransferTotalAmount" parameterType="String" resultType="int">
		SELECT SUM(T.deltaAmount) AS todayTransferTotal
	    FROM javabankDtransaction T
	    JOIN javabankDeposit D ON T.depositAccount = D.depositAccount
	    WHERE D.userId = #{userId}
	      AND T.type = '출금'
	      AND TO_CHAR(T.updateDate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
	</select>
    
    <insert id="saveDeposit" parameterType="map">
    	INSERT INTO javabankProduct (
            productAccount,
            userId,
            productPw,
            category,
            regDate,
            expiryDate,
            interestRate,
            depositAccount
        ) 
        VALUES (
            #{productAccount, jdbcType=VARCHAR},  <!-- 계좌 번호 값 -->
	        #{userId, jdbcType=VARCHAR},
	        #{productPw, jdbcType=NUMERIC},
	        #{category},
	        SYSDATE,
	        #{expiryDate},
	        #{interestRate},
	        #{mainAccount, jdbcType=VARCHAR}
        )
    </insert>
    
    <insert id="saveInitialTransactionDeposit">
        INSERT INTO javabankPtransaction (productSeq, productAccount,updateDate, deltaAmount, balance, type, memo)
        VALUES (javabankPtransaction_seq.nextval, #{productAccount}, SYSDATE, #{deltaAmount}, #{balance}, #{type}, #{memo})
    </insert>
    
    <select id="mainAccount" parameterType="String" resultType="String">
    	SELECT depositAccount 
		FROM javabankDeposit
		WHERE userId = #{userId}
		  AND mainAccount = 'Y'
    </select>
    
    <insert id="saveSaving" parameterType="map">
    	INSERT INTO javabankProduct (
            productAccount,
            userId,
            productPw,
            category,
            regDate,
            expiryDate,
            interestRate,
            depositAccount,
            autoTransferDate,
            monthlyPayment
        ) 
        VALUES (
            #{productAccount, jdbcType=VARCHAR},  <!-- 계좌 번호 값 -->
	        #{userId, jdbcType=VARCHAR},
	        #{productPw, jdbcType=NUMERIC},
	        #{category},
	        SYSDATE,
	        #{expiryDate},
	        #{interestRate},
	        #{mainAccount, jdbcType=VARCHAR},
	        #{autoTransferDate},
	        #{monthlyPayment}
        )
    </insert>
    
    <insert id="saveInitialTransactionSaving">
        INSERT INTO javabankPtransaction (productSeq, productAccount,updateDate, deltaAmount, balance, type, memo)
        VALUES (javabankPtransaction_seq.nextval, #{productAccount}, SYSDATE, #{deltaAmount}, #{balance}, #{type}, #{memo})
    </insert>
    
    <select id="getAccountByAccountNumber" parameterType="String" resultType="DepositDTO">
    	SELECT d.*,t.*
		FROM 
		    javabankDeposit d
		FULL JOIN 
		    javabankDtransaction t
		ON 
		    d.depositAccount = t.depositAccount
		WHERE 
		    (d.depositAccount = #{depositAccount} OR t.depositAccount = #{depositAccount})
    AND updateDate >= ADD_MONTHS(SYSDATE, -1)  <!-- 최근 1개월 내 거래만 조회 -->
    ORDER BY updateDate DESC
    </select>
    
    <select id="getDepositByAccountNumber" parameterType="String" resultType="ProductDTO">
    	SELECT d.*,t.*
		FROM 
		    javabankProduct d
		FULL JOIN 
		    javabankPtransaction t
		ON 
		    d.productAccount = t.productAccount
		WHERE 
		    (d.productAccount = #{productAccount} OR t.productAccount = #{productAccount})
    AND updateDate >= ADD_MONTHS(SYSDATE, -1)  <!-- 최근 1개월 내 거래만 조회 -->
    ORDER BY updateDate DESC
    </select>
    
    <select id="isValidAccount" parameterType="String" resultType="int">
    	SELECT CASE WHEN COUNT(*) &gt; 0 THEN 1 ELSE 0 END
FROM javabankDeposit
WHERE depositAccount = #{transferredAccount}
    </select>
    
    <select id="getAccountName" parameterType="String" resultType="String">
    	SELECT 
		    u.userName
		FROM 
		    javabankDeposit a
		JOIN 
		    javabankUser u
		ON 
		    a.userId = u.userId
		WHERE 
		    a.depositAccount = #{transferredAccount}
    </select>
    
    <select id="getTransferList" parameterType="String" resultType="DepositDTO">
    	WITH RecentWithdrawals AS (
		    SELECT 
		        t.transferredAccount, 
		        t.transferredName, 
		        MIN(t.updateDate) AS updateDate  
		    FROM 
		        javabankDtransaction t
		    JOIN 
		        javabankDeposit d 
		    ON 
		        t.depositAccount = d.depositAccount
		    WHERE 
		        d.userId = #{userId} 
		        AND t.type = '출금'
		    GROUP BY 
		        t.transferredAccount, t.transferredName
		    ORDER BY 
		        MIN(t.updateDate) DESC
		)
		SELECT 
		    rw.transferredAccount, 
		    rw.transferredName
		FROM 
		    (SELECT DISTINCT transferredAccount, transferredName, ROWNUM AS rn
		     FROM RecentWithdrawals
		     WHERE ROWNUM &lt;= 3
		    ) rw
    </select>
    
    <select id="getAllSavingsAccounts" resultType="ProductDTO">
    SELECT 
        p.productAccount,                
        p.category,                      
        p.interestRate,                  
        t.updateDate,                    
        t.type,                          
        t.deltaAmount,                   
        t.balance                        
    FROM 
        javabankProduct p
    JOIN 
        javabankPtransaction t 
        ON p.productAccount = t.productAccount
    WHERE 
        p.expiryDate >= SYSDATE 
        AND t.updateDate = (
            SELECT MAX(t2.updateDate) 
            FROM javabankPtransaction t2 
            WHERE t2.productAccount = p.productAccount
        )
</select>
    
    <insert id="insertInterestTransactions" parameterType="list">
    <foreach collection="list" item="account">
        INSERT INTO javabankPtransaction (
            productSeq,           -- 이체번호 (PK)
            productAccount,       -- 계좌번호 (FK)
            updateDate,           -- 변동일자
            type,                 -- 구분 (이자입금)
            memo,                 -- 적요 (예: 월 이자 지급)
            deltaAmount,          -- 변동금액 (이자 금액)
            balance               -- 잔액 (이자 적용 후 잔액)
        ) 
        VALUES (
            javabankDtransaction_seq.NEXTVAL,  -- 시퀀스를 사용한 자동 증가
            #{account.productAccount},  
            #{account.updateDate},      
            #{account.type},            
            #{account.memo},            
            #{account.deltaAmount},     
            #{account.balance}          
        )
    </foreach>
</insert>

    
    
    <!-- 
    내계좌리스트에서 사용
    <select id="getAccountsByUserId" parameterType="String" resultType="DepositDTO">
		SELECT 
            D.depositAccount,   
            D.category,          
            T.balance,           
            D.regDate,           
            D.interestRate,      
            D.transactionLimit,  
            D.mainAccount,       
            T.accountSeq,        
            T.updateDate,        
            T.type,              
            T.memo,              
            T.deltaAmount        -
        FROM 
            javabankDeposit D
        LEFT JOIN 
            javabankDtransaction T 
        ON 
            D.depositAccount = T.depositAccount
        WHERE 
            D.userId = #{loginId}
        AND 
	        T.updateDate = (
	            SELECT MAX(T2.updateDate)
	            FROM javabankDtransaction T2
	            WHERE T2.depositAccount = T.depositAccount
	        )
	</select>
     -->
    
    
</mapper>