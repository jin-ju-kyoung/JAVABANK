<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mybatis.javabank.javabank-mapper">
    <insert id="joinSuccess" parameterType="java.util.Map">
         insert into javabankUser (userId, userPw, userName, userBirth, userEmail, userTel, userRoles, userRegDate)
         	values (#{userId}, #{userPw}, #{userName}, #{userBirth}, #{userTel}, #{fullEmail},'USER', SYSDATE)
    </insert>
    
    <select id="findByUserId" parameterType="String" resultType="UserDTO">
		select * from javabankUser 
		where userId = #{userid}
    </select>
    
    <select id="getAccountCountByUserId" parameterType="String" resultType="int">
    	select count(*) from javabankDeposit where userId=#{userId}
    </select>
    
    
    <insert id="saveAccount" parameterType="map">
    	INSERT INTO javabankDeposit (
            depositAccount,
            userId,
            depositPw,
            category,
            regDate,
            interestRate,
            transactionLimit,
            mainAccount
        ) 
        VALUES (
            #{accountNumber, jdbcType=VARCHAR},  <!-- 계좌 번호 값 -->
	        #{userId, jdbcType=VARCHAR},
	        #{depositPw, jdbcType=NUMERIC},
	        DEFAULT,
	        SYSDATE,
	        DEFAULT,
	        #{accountLimit, jdbcType=NUMERIC},
	        #{mainAccount, jdbcType=VARCHAR}
        )
    </insert>
    
    <insert id="saveInitialTransaction">
        INSERT INTO javabankDtransaction (accountSeq, depositAccount, deltaAmount, balance, type, memo)
        VALUES (javabankDtransaction_seq.nextval, #{accountNumber}, #{deltaAmount}, #{balance}, #{type}, #{memo})
    </insert>
    
    <select id="checkId" parameterType="String" resultType="int">
		select count(*) from javabankUser 
		where userId = #{userId}
	</select>
	
	<select id="getAccountsByUserId" parameterType="String" resultType="DepositDTO">
		SELECT 
            D.depositAccount,    -- 계좌 번호
            D.category,          -- 계좌 구분
            T.balance,           -- 계좌 잔액
            D.regDate,           -- 계좌 개설일
            D.interestRate,      -- 이자율
            D.transactionLimit,  -- 이체한도
            D.mainAccount,       -- 주거래 여부
            T.accountSeq,        -- 거래 번호
            T.updateDate,        -- 거래일
            T.type,              -- 거래 유형 (개설/입금/출금 등)
            T.memo,              -- 적요
            T.deltaAmount        -- 변동 금액
        FROM 
            javabankDeposit D
        LEFT JOIN 
            javabankDtransaction T 
        ON 
            D.depositAccount = T.depositAccount
        WHERE 
            D.userId = #{loginId}
        AND 
	        T.updateDate = (
	            SELECT MAX(T2.updateDate)
	            FROM javabankDtransaction T2
	            WHERE T2.depositAccount = T.depositAccount
	        )
	</select>
	
	<select id="getDepositsByUserId" parameterType="String" resultType="ProductDTO">
			SELECT 
		        P.productAccount,   -- 계좌 번호
		        P.productPw,        -- 계좌 비밀번호
		        P.userId,           -- 아이디
		        P.category,         -- 상품 구분 (정기예금/정기적금)
		        P.autoTransferDate, -- 자동이체일
		        P.monthlyPayment,   -- 월납입 금액
		        P.regDate,          -- 계좌 개설일
		        P.expiryDate,       -- 만기일자
		        P.interestRate,     -- 이자율
		        P.depositAccount,   -- 자동이체 통장
		        T.productSeq,       -- 이체 번호
		        T.updateDate,       -- 변동일자
		        T.type,             -- 거래 구분
		        T.memo,             -- 적요
		        T.deltaAmount,      -- 변동 금액
		        T.balance           -- 잔액
		    FROM 
		        javabankProduct P
		    LEFT JOIN 
		        JB_Ptransaction T 
		    ON 
		        P.productAccount = T.productAccount
		    WHERE 
		        P.category = '정기예금'  -- 정기예금만 조회
		    AND 
		        P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
	</select>
	
	
	<select id="getSavingsByUserId" parameterType="String" resultType="ProductDTO">
			SELECT 
		        P.productAccount,   -- 계좌 번호
		        P.productPw,        -- 계좌 비밀번호
		        P.userId,           -- 아이디
		        P.category,         -- 상품 구분 (정기예금/정기적금)
		        P.autoTransferDate, -- 자동이체일
		        P.monthlyPayment,   -- 월납입 금액
		        P.regDate,          -- 계좌 개설일
		        P.expiryDate,       -- 만기일자
		        P.interestRate,     -- 이자율
		        P.depositAccount,   -- 자동이체 통장
		        T.productSeq,       -- 이체 번호
		        T.updateDate,       -- 변동일자
		        T.type,             -- 거래 구분
		        T.memo,             -- 적요
		        T.deltaAmount,      -- 변동 금액
		        T.balance           -- 잔액
		    FROM 
		        javabankProduct P
		    LEFT JOIN 
		        JB_Ptransaction T 
		    ON 
		        P.productAccount = T.productAccount
		    WHERE 
		        P.category = '정기적금'  -- 정기예금만 조회
		    AND 
		        P.userId = #{loginId}     -- 해당 사용자의 계좌만 조회
	</select>
	
	<insert id="transferMoneyOk" >
		INSERT INTO javabankDtransaction (accountSeq, depositAccount, deltaAmount, balance, type, memo, transferredName, transferredAccount )
        VALUES (javabankDtransaction_seq.nextval, #{depositAccount}, #{deltaAmount}, #{balance}, '출금', #{memo, jdbcType=VARCHAR} ,'임시이름',#{transferredAccount})
	</insert>
	
	<select id="getTodayTransferTotalAmount" parameterType="String" resultType="int">
		SELECT SUM(T.deltaAmount) AS todayTransferTotal
	    FROM javabankDtransaction T
	    JOIN javabankDeposit D ON T.depositAccount = D.depositAccount
	    WHERE D.userId = #{userId}
	      AND T.type = '출금'
	      AND TO_CHAR(T.updateDate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
	</select>
    
    
    
</mapper>